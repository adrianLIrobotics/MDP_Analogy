
from numpy import array, asarray
import numpy.random as random
from statistics import covariance
import numpy as np
#from robot import robotModel
from filterpy.kalman import KalmanFilter
import warnings
from scipy.linalg import block_diag
from filterpy.common import Q_discrete_white_noise
from numpy import array, asarray
from numpy.random import randn
import copy

def fusion_test(wheel_sigma, ps_sigma, do_plot=True):
    dt = 0.1
    kf = KalmanFilter(dim_x=2, dim_z=2)

    kf.F = array([[1., dt], [0., 1.]])
    kf.H = array([[1., 0.], [1., 0.]])
    kf.x = array([[0.], [1.]])
    print(kf.x)
    # [[0.]
    #    [1.]]
    kf.Q *= array([[(dt**3)/3, (dt**2)/2],
                   [(dt**2)/2,  dt      ]]) * 0.02
    kf.P *= 100
    kf.R[0, 0] = wheel_sigma**2
    kf.R[1, 1] = ps_sigma**2 

    random.seed(1123)
    xs, zs, nom = [], [], []
    for i in range(1, 100):
        m0 = i + randn()*wheel_sigma
        m1 = i + randn()*ps_sigma
        z = array([[m0], [m1]])
        
        #print(z) # [[98.42255554]
                    #[96.17059766]]
        kf.predict()
        kf.update(z)

        xs.append(kf.x.T[0])
        zs.append(z.T[0])
        nom.append(i)

    xs = asarray(xs)
    zs = asarray(zs)
    nom = asarray(nom)
    
    res = nom - xs[:, 0]

fusion_test(1.5, 3.0)